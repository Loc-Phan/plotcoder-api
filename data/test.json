[{"execution_count": 13, "cell_type": "code", "metadata": {"repo": "estimand/ga-data-science", "path": "/repo_1356/09_ml_classification/notebooks/03_solutions.ipynb", "boilerplate": "", "boilerplate_path": "/checkpoint/sviyer/repo_1356/09_ml_classification/notebooks/03_exercises.ipynb", "url": "http://kingboo.cs.washington.edu:34000/tree/exp/temp-pipeline/exercise/nbviz/checkpoint/sviyer/repo_1356/09_ml_classification/notebooks/03-solutionsnb_1_cell_24.ipynb", "submission_url": "http://kingboo.cs.washington.edu:34000/tree/exp/temp-pipeline/exercise/nbviz/checkpoint/sviyer/repo_1356/09_ml_classification/notebooks/03-exercisesnb_1_cell_24.ipynb"}, "context": [{"cell_type": "markdown", "distance_target": 1, "nl": ["Plot", "the", "ROC", "curve", "for", "the", "'best", "'", "model", "."], "nl_original": "Plot the ROC curve for the 'best' model."}, {"cell_type": "code", "distance_target": 2, "code": "metrics.confusion_matrix(y, model2.predict(X))", "code_tokens_normalized": ["metrics", ".", "confusion_matrix", "(", "y", ",", "model2", ".", "predict", "(", "X", ")", ")", "\n"], "code_tokens_normalized_trunc": ["metrics", ".", "confusion_matrix", "(", "y", ",", "model2", ".", "predict", "(", "X", ")", ")"], "code_tokens_partial_normalized_trunc": ["metrics", ".", "confusion_matrix", "(", "y", ",", "model2", ".", "predict", "(", "X", ")", ")"], "code_tokens": ["metrics", ".", "confusion_matrix", "(", "y", ",", "model2", ".", "predict", "(", "X", ")", ")", ""], "code_tokens_clean": ["metrics", ".", "confusion_matrix", "(", "y", ",", "model2", ".", "predict", "(", "X", ")", ")"], "comments": [], "docstring": null, "api_sequence": ["confusion_matrix", "predict"]}, {"cell_type": "markdown", "distance_target": 3, "nl": ["Compute", "confusion", "matrix", "for", "the", "'best", "'", "model", "."], "nl_original": "Compute confusion matrix for the 'best' model."}, {"cell_type": "code", "distance_target": 4, "code": "list(zip(X.columns, np.exp(model2.coef_[0,:])))", "code_tokens_normalized": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model2", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")", "\n"], "code_tokens_normalized_trunc": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model2", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")"], "code_tokens_partial_normalized_trunc": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model2", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")"], "code_tokens": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model2", ".", "coef_", "[", "0", ",", ":", "]", ")", ")", ")", ""], "code_tokens_clean": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model2", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")"], "comments": [], "docstring": null, "api_sequence": ["exp"]}, {"cell_type": "markdown", "distance_target": 5, "nl": ["Print", "variable", "names", "and", "odds", "ratios", "for", "the", "'best", "'", "model", "."], "nl_original": "Print variable names and odds ratios for the 'best' model."}, {"cell_type": "code", "distance_target": 6, "code": "model2 = lm.LogisticRegressionCV(Cs=10, cv=ten_fold_cv, scoring='roc_auc')\nmodel2.fit(X, y)", "code_tokens_normalized": ["loc0", "=", "lm", ".", "LogisticRegressionCV", "(", "Cs", "=", "10", ",", "cv", "=", "ten_fold_cv", ",", "scoring", "=", "'jupyter_string'", ")", "\n", "loc0", ".", "fit", "(", "X", ",", "y", ")", "\n"], "code_tokens_normalized_trunc": ["loc0", "=", "lm", ".", "LogisticRegressionCV", "(", "Cs", "=", "10", ",", "cv", "=", "ten_fold_cv", ",", "scoring", "=", "'jupyter_string'", ")", "NEWLINE", "loc0", ".", "fit", "(", "X", ",", "y", ")"], "code_tokens_partial_normalized_trunc": ["model2", "=", "lm", ".", "LogisticRegressionCV", "(", "Cs", "=", "10", ",", "cv", "=", "ten_fold_cv", ",", "scoring", "=", "'jupyter_string'", ")", "NEWLINE", "model2", ".", "fit", "(", "X", ",", "y", ")"], "code_tokens": ["model2", "=", "lm", ".", "LogisticRegressionCV", "(", "Cs", "=", "10", ",", "cv", "=", "ten_fold_cv", ",", "scoring", "=", "'roc_auc'", ")", "\n", "model2", ".", "fit", "(", "X", ",", "y", ")", ""], "code_tokens_clean": ["model2", "=", "lm", ".", "LogisticRegressionCV", "(", "Cs", "=", "10", ",", "cv", "=", "ten_fold_cv", ",", "scoring", "=", "'jupyter_string'", ")", "NEWLINE", "model2", ".", "fit", "(", "X", ",", "y", ")"], "comments": [], "docstring": null, "api_sequence": ["LogisticRegressionCV", "fit"]}, {"cell_type": "markdown", "distance_target": 7, "nl": ["Determine", "'optimal", "'", "value", "of", "CTAG", "C", "CTAG", "by", "cross-validation", "using", "AUC", "scoring", "and", "$", "L_", "{", "2", "}", "$", "regularisation", "."], "nl_original": "Determine 'optimal' value of `C` by cross-validation using AUC scoring and $L_{2}$ regularisation."}, {"cell_type": "code", "distance_target": 8, "code": "aucs = ms.cross_val_score(lm.LogisticRegression(C=1e50), X, y, scoring='roc_auc', cv=ten_fold_cv)\nnp.mean(aucs)", "code_tokens_normalized": ["loc0", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "scoring", "=", "\n", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "\n", "np", ".", "mean", "(", "loc0", ")", "\n"], "code_tokens_normalized_trunc": ["loc0", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "scoring", "=", "NEWLINE", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "NEWLINE", "np", ".", "mean", "(", "loc0", ")"], "code_tokens_partial_normalized_trunc": ["aucs", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "scoring", "=", "NEWLINE", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "NEWLINE", "np", ".", "mean", "(", "aucs", ")"], "code_tokens": ["aucs", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e50", ")", ",", "X", ",", "y", ",", "scoring", "=", "'roc_auc'", ",", "cv", "=", "ten_fold_cv", ")", "\n", "np", ".", "mean", "(", "aucs", ")", ""], "code_tokens_clean": ["aucs", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "scoring", "=", "NEWLINE", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "NEWLINE", "np", ".", "mean", "(", "aucs", ")"], "comments": [], "docstring": null, "api_sequence": ["cross_val_score", "LogisticRegression", "mean"]}, {"cell_type": "markdown", "distance_target": 9, "nl": ["Compute", "average", "AUC", "across", "folds", "."], "nl_original": "Compute average AUC across folds."}, {"cell_type": "code", "distance_target": 10, "code": "accuracies = ms.cross_val_score(lm.LogisticRegression(C=1e50), X, y, scoring='accuracy', cv=ten_fold_cv)\nnp.mean(accuracies)", "code_tokens_normalized": ["loc0", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "scoring", "=", "\n", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "\n", "np", ".", "mean", "(", "loc0", ")", "\n"], "code_tokens_normalized_trunc": ["loc0", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "scoring", "=", "NEWLINE", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "NEWLINE", "np", ".", "mean", "(", "loc0", ")"], "code_tokens_partial_normalized_trunc": ["accuracies", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "NEWLINE", "scoring", "=", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "NEWLINE", "np", ".", "mean", "(", "accuracies", ")"], "code_tokens": ["accuracies", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e50", ")", ",", "X", ",", "y", ",", "scoring", "=", "'accuracy'", ",", "cv", "=", "ten_fold_cv", ")", "\n", "np", ".", "mean", "(", "accuracies", ")", ""], "code_tokens_clean": ["accuracies", "=", "ms", ".", "cross_val_score", "(", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", ",", "X", ",", "y", ",", "NEWLINE", "scoring", "=", "'jupyter_string'", ",", "cv", "=", "ten_fold_cv", ")", "NEWLINE", "np", ".", "mean", "(", "accuracies", ")"], "comments": [], "docstring": null, "api_sequence": ["cross_val_score", "LogisticRegression", "mean"]}, {"cell_type": "markdown", "distance_target": 11, "nl": ["Compute", "average", "classification", "accuracy", "across", "folds", "."], "nl_original": "Compute average classification accuracy across folds."}, {"cell_type": "code", "distance_target": 12, "code": "ten_fold_cv = ms.StratifiedKFold(n_splits=10, shuffle=True)", "code_tokens_normalized": ["loc0", "=", "ms", ".", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ")", "\n"], "code_tokens_normalized_trunc": ["loc0", "=", "ms", ".", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ")"], "code_tokens_partial_normalized_trunc": ["ten_fold_cv", "=", "ms", ".", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ")"], "code_tokens": ["ten_fold_cv", "=", "ms", ".", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ")", ""], "code_tokens_clean": ["ten_fold_cv", "=", "ms", ".", "StratifiedKFold", "(", "n_splits", "=", "10", ",", "shuffle", "=", "True", ")"], "comments": [], "docstring": null, "api_sequence": ["StratifiedKFold"]}, {"cell_type": "markdown", "distance_target": 13, "nl": ["Define", "10", "folds", "for", "stratified", "cross-validation", "."], "nl_original": "Define 10 folds for stratified cross-validation."}, {"cell_type": "code", "distance_target": 14, "code": "list(zip(X.columns, np.exp(model1.coef_[0,:])))", "code_tokens_normalized": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model1", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")", "\n"], "code_tokens_normalized_trunc": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model1", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")"], "code_tokens_partial_normalized_trunc": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model1", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")"], "code_tokens": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model1", ".", "coef_", "[", "0", ",", ":", "]", ")", ")", ")", ""], "code_tokens_clean": ["list", "(", "zip", "(", "X", ".", "columns", ",", "np", ".", "exp", "(", "model1", ".", "coef_", "[", "(", "0", ")", ",", ":", "]", ")", ")", ")"], "comments": [], "docstring": null, "api_sequence": ["exp"]}, {"cell_type": "markdown", "distance_target": 15, "nl": ["Print", "variable", "names", "and", "odds", "ratios", "."], "nl_original": "Print variable names and odds ratios."}, {"cell_type": "code", "distance_target": 16, "code": "X = whites.drop(['quality', 'good_quality'], axis=1)\ny = whites.good_quality\nmodel1 = lm.LogisticRegression(C=1e50)\nmodel1.fit(X, y)", "code_tokens_normalized": ["loc0", "=", "whites", ".", "drop", "(", "[", "'jupyter_string'", ",", "'jupyter_string'", "]", ",", "axis", "=", "1", ")", "\n", "loc1", "=", "whites", ".", "good_quality", "\n", "loc2", "=", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", "\n", "loc2", ".", "fit", "(", "loc0", ",", "loc1", ")", "\n"], "code_tokens_normalized_trunc": ["loc0", "=", "whites", ".", "drop", "(", "[", "'jupyter_string'", ",", "'jupyter_string'", "]", ",", "axis", "=", "1", ")", "NEWLINE", "loc1", "=", "whites", ".", "good_quality", "NEWLINE", "loc2", "=", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", "NEWLINE", "loc2", ".", "fit", "(", "loc0", ",", "loc1", ")"], "code_tokens_partial_normalized_trunc": ["X", "=", "whites", ".", "drop", "(", "[", "'jupyter_string'", ",", "'jupyter_string'", "]", ",", "axis", "=", "1", ")", "NEWLINE", "y", "=", "whites", ".", "good_quality", "NEWLINE", "model1", "=", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", "NEWLINE", "model1", ".", "fit", "(", "X", ",", "y", ")"], "code_tokens": ["X", "=", "whites", ".", "drop", "(", "[", "'quality'", ",", "'good_quality'", "]", ",", "axis", "=", "1", ")", "\n", "y", "=", "whites", ".", "good_quality", "\n", "model1", "=", "lm", ".", "LogisticRegression", "(", "C", "=", "1e50", ")", "\n", "model1", ".", "fit", "(", "X", ",", "y", ")", ""], "code_tokens_clean": ["X", "=", "whites", ".", "drop", "(", "[", "'jupyter_string'", ",", "'jupyter_string'", "]", ",", "axis", "=", "1", ")", "NEWLINE", "y", "=", "whites", ".", "good_quality", "NEWLINE", "model1", "=", "lm", ".", "LogisticRegression", "(", "C", "=", "1e+50", ")", "NEWLINE", "model1", ".", "fit", "(", "X", ",", "y", ")"], "comments": [], "docstring": null, "api_sequence": ["drop", "LogisticRegression", "fit"]}, {"cell_type": "markdown", "distance_target": 17, "nl": ["Fit", "a", "logistic", "regression", "model", "for", "'good_quality", "'", "using", "all", "predictors", "."], "nl_original": "Fit a logistic regression model for 'good_quality' using all predictors."}, {"cell_type": "code", "distance_target": 18, "code": "whites['good_quality'] = whites['quality'] >= 7", "code_tokens_normalized": ["whites", "[", "'jupyter_string'", "]", "=", "whites", "[", "'jupyter_string'", "]", ">=", "7", "\n"], "code_tokens_normalized_trunc": ["whites", "[", "'jupyter_string'", "]", "=", "whites", "[", "'jupyter_string'", "]", ">=", "7"], "code_tokens_partial_normalized_trunc": ["whites", "[", "'jupyter_string'", "]", "=", "whites", "[", "'jupyter_string'", "]", ">=", "7"], "code_tokens": ["whites", "[", "'good_quality'", "]", "=", "whites", "[", "'quality'", "]", ">=", "7", ""], "code_tokens_clean": ["whites", "[", "'jupyter_string'", "]", "=", "whites", "[", "'jupyter_string'", "]", ">=", "7"], "comments": [], "docstring": null, "api_sequence": ["NO_API_SEQUENCE"]}, {"cell_type": "markdown", "distance_target": 19, "nl": ["Define", "a", "new", "variable", "'good_quality", "'", "for", "wines", "with", "quality", "&", "gt", ";", "=", "7", "."], "nl_original": "Define a new variable 'good_quality' for wines with quality >= 7."}, {"cell_type": "code", "distance_target": 20, "code": "whites = pd.read_csv(WHITES_URL, sep=';')", "code_tokens_normalized": ["loc0", "=", "pd", ".", "read_csv", "(", "WHITES_URL", ",", "sep", "=", "'jupyter_string'", ")", "\n"], "code_tokens_normalized_trunc": ["loc0", "=", "pd", ".", "read_csv", "(", "WHITES_URL", ",", "sep", "=", "'jupyter_string'", ")"], "code_tokens_partial_normalized_trunc": ["whites", "=", "pd", ".", "read_csv", "(", "WHITES_URL", ",", "sep", "=", "'jupyter_string'", ")"], "code_tokens": ["whites", "=", "pd", ".", "read_csv", "(", "WHITES_URL", ",", "sep", "=", "';'", ")", ""], "code_tokens_clean": ["whites", "=", "pd", ".", "read_csv", "(", "WHITES_URL", ",", "sep", "=", "'jupyter_string'", ")"], "comments": [], "docstring": null, "api_sequence": ["read_csv"]}, {"cell_type": "markdown", "distance_target": 21, "nl": ["Read", "in", "the", "Wine", "Quality", "dataset", "."], "nl_original": "Read in the Wine Quality dataset."}, {"cell_type": "code", "distance_target": 22, "code": "WHITES_URL = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv'", "code_tokens_normalized": ["loc0", "=", "'jupyter_string'", "\n"], "code_tokens_normalized_trunc": ["loc0", "=", "'jupyter_string'"], "code_tokens_partial_normalized_trunc": ["WHITES_URL", "=", "(", "NEWLINE", "'jupyter_string'", "NEWLINE", ")"], "code_tokens": ["WHITES_URL", "=", "'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv'", ""], "code_tokens_clean": ["WHITES_URL", "=", "(", "NEWLINE", "'jupyter_string'", "NEWLINE", ")"], "comments": [], "docstring": null, "api_sequence": ["NO_API_SEQUENCE"]}, {"cell_type": "code", "distance_target": 23, "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import linear_model as lm, metrics, model_selection as ms", "code_tokens_normalized": ["from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms", "\n"], "code_tokens_normalized_trunc": ["from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms"], "code_tokens_partial_normalized_trunc": ["from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms"], "code_tokens": ["import", "numpy", "as", "np", "\n", "import", "pandas", "as", "pd", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "seaborn", "as", "sns", "\n", "\n", "from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms", ""], "code_tokens_clean": ["import", "numpy", "as", "np", "NEWLINE", "import", "pandas", "as", "pd", "NEWLINE", "import", "matplotlib", ".", "pyplot", "as", "plt", "NEWLINE", "import", "seaborn", "as", "sns", "NEWLINE", "from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms"], "comments": [], "docstring": null, "api_sequence": ["NO_API_SEQUENCE"]}, {"cell_type": "markdown", "distance_target": 24, "nl": ["Logistic", "regression", "using", "CTAG", "scikit-learn", "CTAG"], "nl_original": "# Logistic regression using `scikit-learn`"},{"cell_type": "code", "distance_target": 25, "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import linear_model as lm, metrics, model_selection as ms", "code_tokens_normalized": ["from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms", "\n"], "code_tokens_normalized_trunc": ["from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms"], "code_tokens_partial_normalized_trunc": ["from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms"], "code_tokens": ["fpr", ",", "tpr", ",", "cutoffs", "=", "metrics", ".", "roc_curve", "(", "y", ",", "model2", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "1", "]", ")", "\n"], "code_tokens_clean": ["import", "numpy", "as", "np", "NEWLINE", "import", "pandas", "as", "pd", "NEWLINE", "import", "matplotlib", ".", "pyplot", "as", "plt", "NEWLINE", "import", "seaborn", "as", "sns", "NEWLINE", "from", "sklearn", "import", "linear_model", "as", "lm", ",", "metrics", ",", "model_selection", "as", "ms"], "comments": [], "docstring": null, "api_sequence": ["NO_API_SEQUENCE"]}], "code": "fpr, tpr, cutoffs = metrics.roc_curve(y, model2.predict_proba(X)[:,1])\nplt.plot(fpr, tpr)", "code_tokens_normalized": ["loc0", ",", "loc1", ",", "loc2", "=", "metrics", ".", "roc_curve", "(", "y", ",", "model2", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "(", "1", ")", "]", ")", "\n", "plt", ".", "plot", "(", "loc0", ",", "loc1", ")", "\n"], "code_tokens_normalized_trunc": ["loc0", ",", "loc1", ",", "loc2", "=", "metrics", ".", "roc_curve", "(", "y", ",", "model2", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "(", "1", ")", "]", ")", "NEWLINE", "plt", ".", "plot", "(", "loc0", ",", "loc1", ")"], "code_tokens_partial_normalized_trunc": ["fpr", ",", "tpr", ",", "cutoffs", "=", "metrics", ".", "roc_curve", "(", "y", ",", "model2", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "(", "1", ")", "]", ")", "NEWLINE", "plt", ".", "plot", "(", "fpr", ",", "tpr", ")"], "code_tokens": ["fpr", ",", "tpr", ",", "cutoffs", "=", "metrics", ".", "roc_curve", "(", "y", ",", "model2", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "1", "]", ")", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ")", ""], "code_tokens_clean": ["fpr", ",", "tpr", ",", "cutoffs", "=", "metrics", ".", "roc_curve", "(", "y", ",", "model2", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "(", "1", ")", "]", ")", "NEWLINE", "plt", ".", "plot", "(", "fpr", ",", "tpr", ")"], "comments": [], "docstring": null, "api_sequence": ["roc_curve", "predict_proba", "plot"], "num_cells_above": 24, "imports": ["numpy", "np", "pandas", "pd", "matplotlib", "pyplot", "plt", "seaborn", "sns", "linear_model", "lm", "metrics", "model_selection", "ms"], "nl": ["Plot", "the", "ROC", "curve", "for", "the", "'best", "'", "model", "."], "boilerplate_code": "", "boilerplate_code_tokens": []}
]